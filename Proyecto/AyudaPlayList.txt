/* 
 * Copyright (c) 2000-2004 NEOMAlogic. All rights reserved. Author: Cedric Vaniez
 * <cvaniez@neomalogic.com> Created on 9 fvr. 2004 For more information, please see
 * <http://www.neomalogic.com/>.
 */

package com.neomalogic.eclipse.mipse.player;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IResourceStatus;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Path;

/**
 * DOM
 */
public class Playlist
{
	private List list;

	private List listeners;

	private PlaylistEntry currentEntry;

	private boolean repeat;

	// private boolean random; // todo: random management

	public Playlist()
	{
		list = new LinkedList();
		listeners = new ArrayList(1);
		reset();
	}

	public PlaylistEntry[] getEntries()
	{
		return (PlaylistEntry[]) list.toArray(new PlaylistEntry[list.size()]);
	}

	public int getIndex(PlaylistEntry entry)
	{
		return list.indexOf(entry);
	}

	/**
	 * Return the next song in the playlist.
	 * 
	 * @return a playlist entry or null if the list is empty or the end is reached
	 */
	public PlaylistEntry next()
	{
		PlaylistEntry nextEntry = getNext();

		if (nextEntry == null && repeat)
		{
			if (!list.isEmpty())
			{
				nextEntry = (PlaylistEntry) list.get(0);
			}
		}

		if (nextEntry != null)
		{
			selectEntry(false);
			currentEntry = nextEntry;
			selectEntry(true);
		}

		return nextEntry;
	}

	public PlaylistEntry current()
	{
		return currentEntry;
	}

	/**
	 * Return the previous song in the playlist.
	 * 
	 * @return a playlist entry or null if the list is empty or the start is reached
	 */
	public PlaylistEntry previous()
	{
		PlaylistEntry prevEntry = getPrevious();

		if (prevEntry == null && repeat)
		{
			if (!list.isEmpty())
			{
				prevEntry = (PlaylistEntry) list.get(list.size() > 0 ? list.size() - 1 : 0);
			}
		}

		if (prevEntry != null)
		{
			selectEntry(false);
			currentEntry = prevEntry;
			selectEntry(true);
		}

		return prevEntry;
	}

	/**
	 * Set the current playlist entry.
	 * 
	 * @param entry
	 */
	public void setCurrent(PlaylistEntry entry)
	{
		selectEntry(false);
		currentEntry = entry;
		selectEntry(true);
	}

	/**
	 * Move the pointer to the first entry, if any.
	 */
	public void reset()
	{
		// iterator = list.listIterator();
		if (list.isEmpty())
		{
			currentEntry = null;
		}
		else
		{
			currentEntry = (PlaylistEntry) list.get(0);
		}
	}

	/**
	 * Remove all entries.
	 */
	public void clear()
	{
		for (Iterator ite = list.iterator(); ite.hasNext();)
		{
			PlaylistEntry entry = (PlaylistEntry) ite.next();
			fireEntryRemovedEvent(entry);
		}

		list.clear();
		reset();
	}

	/**
	 * Add a local resource to the playlist.
	 * 
	 * @param path
	 */
	public void add(IPath path)
	{
		IFile[] ifiles = ResourcesPlugin.getWorkspace().getRoot().findFilesForLocation(path);

		for (int i = 0; i < ifiles.length; i++)
		{
			add(ifiles[i]);
		}
	}

	/**
	 * Add a local resource to the playlist.
	 * 
	 * @param resource
	 */
	public void add(IResource resource)
	{
		add(resource.getLocation());
	}

	/**
	 * Add a network resource to the playlist.
	 * 
	 * @param url
	 * @see URL
	 */
	public void add(URL url)
	{
		PlaylistEntry entry = new PlaylistEntry(url, this);
		list.add(entry);

		fireEntryAddedEvent(entry);
	}

	private void add(IFile file)
	{
		if (file.getFileExtension().equalsIgnoreCase("m3u"))
		{
			addPlaylist(file);
		}
		else
		{
			PlaylistEntry entry = new PlaylistEntry(file, this);
			// todo: manage file extension.
			list.add(entry);
			if (currentEntry == null)
			{
				setCurrent(entry);
			}

			fireEntryAddedEvent(entry);
		}
	}

	private void addPlaylist(IFile file)
	{
		try
		{
			BufferedReader in = new BufferedReader(new InputStreamReader(file.getContents()));

			String stringPath;
			while ((stringPath = in.readLine()) != null)
			{
				IPath path = new Path(stringPath);
				add(file.getParent().getLocation().append(path));
			}
		}
		catch (CoreException e)
		{
			// Todo: Auto-generated catch block
			e.printStackTrace();
		}
		catch (IOException e)
		{
			// Todo: Auto-generated catch block
			e.printStackTrace();
		}
	}

	private PlaylistEntry getNext()
	{
		PlaylistEntry entry = null;

		if (hasNext())
		{
			entry = (PlaylistEntry) list.get(list.indexOf(currentEntry) + 1);
		}

		return entry;
	}

	private PlaylistEntry getPrevious()
	{
		PlaylistEntry entry = null;

		if (hasPrevious())
		{
			entry = (PlaylistEntry) list.get(list.indexOf(currentEntry) - 1);
		}

		return entry;
	}

	private boolean hasNext()
	{
		if (currentEntry != null)
		{
			if (list.indexOf(currentEntry) + 1 < list.size())
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}

	private boolean hasPrevious()
	{
		if (currentEntry != null)
		{
			if (list.indexOf(currentEntry) - 1 >= 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}

	private void selectEntry(boolean select)
	{
		if (currentEntry != null)
		{
			currentEntry.setRead(select);
			fireEntryChangedEvent(currentEntry);
		}
	}

	// Listeners management

	public void addPlaylistListener(PlaylistListener listener)
	{
		listeners.add(listener);
	}

	public void removePlaylistListener(PlaylistListener listener)
	{
		listeners.remove(listener);
	}

	private void fireEntryAddedEvent(PlaylistEntry entry)
	{
		PlaylistEvent event = new PlaylistEvent(this);
		event.entry = entry;

		for (Iterator iter = listeners.iterator(); iter.hasNext();)
		{
			PlaylistListener listener = (PlaylistListener) iter.next();
			listener.entryAdded(event);
		}
	}

	private void fireEntryChangedEvent(PlaylistEntry entry)
	{
		PlaylistEvent event = new PlaylistEvent(this);
		event.entry = entry;

		for (Iterator iter = listeners.iterator(); iter.hasNext();)
		{
			PlaylistListener listener = (PlaylistListener) iter.next();
			listener.entryChanged(event);
		}
	}

	private void fireEntryRemovedEvent(PlaylistEntry entry)
	{
		PlaylistEvent event = new PlaylistEvent(this);
		event.entry = entry;

		for (Iterator iter = listeners.iterator(); iter.hasNext();)
		{
			PlaylistListener listener = (PlaylistListener) iter.next();
			listener.entryRemoved(event);
		}
	}

	/**
	 * @return
	 */
	public boolean isRepeat()
	{
		return repeat;
	}

	/**
	 * @param b
	 */
	public void setRepeat(boolean b)
	{
		repeat = b;
	}

}